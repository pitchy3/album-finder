name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install server dependencies
        working-directory: ./server
        run: npm ci
      
      - name: Install client dependencies
        working-directory: ./client
        run: npm ci
      
      - name: Run server unit tests
        working-directory: ./server
        run: npm test -- --coverage
        env:
          NODE_ENV: test
          REDIS_URL: redis://localhost:6379
      
      - name: Run client unit tests
        working-directory: ./client
        run: npm test -- --coverage
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./server/coverage/lcov.info,./client/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: |
          cd server && npm ci
          cd ../client && npm ci
      
      - name: Run integration tests
        working-directory: ./server
        run: npm run test:integration
        env:
          NODE_ENV: test
          REDIS_URL: redis://localhost:6379

  e2e-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Build application
        run: |
          cd client && npm run build
          cd ../server && npm ci
      
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          REDIS_URL: redis://localhost:6379
      
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  docker-test:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Build Docker image
        run: docker build -t album-finder:test .
      
      - name: Run Docker container
        run: |
          docker compose -f docker-compose.yml -f docker-compose.test.yml up -d
          sleep 10
      
      - name: Test Docker health
        run: |
          curl -f http://localhost:3001/healthz || exit 1
      
      - name: Run smoke tests
        run: npm run test:smoke
      
      - name: Cleanup
        if: always()
        run: docker compose down

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Run npm audit
        run: |
          cd server && npm audit --audit-level=moderate --omit=dev
          cd ../client && npm audit --audit-level=moderate --omit=dev
      
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high