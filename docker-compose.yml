services:
  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - internal
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M

  # ✅ NEW: Init container to fix permissions (runs once, then exits)
  album-finder-init:
    image: alpine:latest
    user: "0:0"  # Runs as root (only container that does)
    volumes:
      - albumfinder-data:/data
    environment:
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
    command: >
      sh -c "
        echo '🔧 Init: Fixing volume permissions for PUID=$${PUID} PGID=$${PGID}' &&
        mkdir -p /data &&
        chown -R $${PUID}:$${PGID} /data &&
        chmod -R 755 /data &&
        echo '✅ Init: Permissions fixed successfully' &&
        echo '📁 Init: Volume contents:' &&
        ls -la /data || echo '   (empty)'
      "
    networks:
      - internal

  # Main application - exposed on port for Caddy to proxy
  album-finder:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    user: "${PUID:-1000}:${PGID:-1000}"  # ✅ UPDATED: Use env vars for flexibility
    depends_on:
      redis:
        condition: service_healthy
      album-finder-init:
        condition: service_completed_successfully  # ✅ NEW: Waits for init to finish
    ports:
      - "${APP_PORT:-3001}:3000"
    volumes:
      - albumfinder-data:/app/server/data
    environment:
      # ✅ REMOVED: PUID/PGID not needed in app container anymore
      # Server configuration
      PORT: 3000
      NODE_ENV: production
      # Redis configuration
      REDIS_URL: redis://redis:6379
      # Session configuration
      SESSION_SECRET: ${SESSION_SECRET:-change-me-in-production}
      COOKIE_SECURE: ${COOKIE_SECURE:-true}
      LIDARR_WEBHOOK_KEY: ${LIDARR_WEBHOOK_KEY}
      # Timezone
      TZ: ${TZ:-UTC}
      # Cache configuration
      CACHE_TTL: ${CACHE_TTL:-3600}
      MAX_CACHE_SIZE: ${MAX_CACHE_SIZE:-1000}
      MAX_CACHE_MEMORY: ${MAX_CACHE_MEMORY:-100}
      # Rate limiting configuration
      MUSICBRAINZ_DELAY: ${MUSICBRAINZ_DELAY:-1000}
      MAX_CONCURRENT_REQUESTS: ${MAX_CONCURRENT_REQUESTS:-10}
      REQUEST_TIMEOUT: ${REQUEST_TIMEOUT:-30000}
    networks:
      - internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M

  # E2E Test Runner (only runs with --profile e2e)
  e2e-tests:
    image: mcr.microsoft.com/playwright:v1.49.0-jammy
    working_dir: /app
    depends_on:
      album-finder:
        condition: service_healthy
    environment:
      # Point tests at the running app container
      BASE_URL: http://album-finder:3000
      CI: ${CI:-false}
    volumes:
      # Mount source code for tests
      - ./e2e:/app/e2e:ro
      - ./playwright.config.js:/app/playwright.config.js:ro
      - ./package.json:/app/package.json:ro
      - ./package-lock.json:/app/package-lock.json:ro
      # Mount output directories
      - ./playwright-report:/app/playwright-report
      - ./test-results:/app/test-results
      - e2e_node_modules:/app/node_modules
    networks:
      - internal
    profiles:
      - e2e
    command: >
      sh -c "
        echo '🔧 Installing test dependencies...' &&
        npm ci --prefer-offline &&
        echo '🧪 Running E2E tests...' &&
        npx playwright test --reporter=html
      "

  # Redis monitoring (optional) - exposed on port for Caddy to proxy
  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: unless-stopped
    depends_on:
      - redis
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=${REDIS_COMMANDER_USER:-admin}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-password}
    networks:
      - internal
    profiles:
      - monitoring

  # Prometheus for metrics collection (optional) - exposed on port for Caddy to proxy
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - internal
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional) - exposed on port for Caddy to proxy
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    depends_on:
      - prometheus
    ports:
      - "${GRAFANA_PORT:-3002}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - internal
    profiles:
      - monitoring

volumes:
  albumfinder-data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  e2e_node_modules:
    driver: local

networks:
  # Only internal network needed - no external network for reverse proxy
  internal:
    driver: bridge
